/-
Copyright (c) 2022 Floris van Doorn, Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Floris van Doorn, Heather Macbeth
-/
import geometry.manifold.vector_bundle.fiberwise_linear
import topology.vector_bundle.constructions

/-! # Smooth vector bundles

This file defines smooth vector bundles over a smooth manifold.

Let `E` be a topological vector bundle, with model fiber `F` and base space `B`.  We consider `E` as
carrying a charted space structure given by its trivializations -- these are charts to `B √ó F`.
Then, by "composition", if `B` is itself a charted space over `H` (e.g. a smooth manifold), then `E`
is also a charted space over `H √ó F`

Now, we define `smooth_vector_bundle` as the `Prop` of having smooth transition functions.
Recall the structure groupoid `smooth_fiberwise_linear` on `B √ó F` consisting of smooth, fiberwise
linear local homeomorphisms.  We show that our definition of "smooth vector bundle" implies
`has_groupoid` for this groupoid, and show (by a "composition" of `has_groupoid` instances) that
this means that a smooth vector bundle is a smooth manifold.

Since `smooth_vector_bundle` is a mixin, it should be easy to make variants and for many such
variants to coexist -- vector bundles can be smooth vector bundles over several different base
fields, they can also be C^k vector bundles, etc.

## Main definitions and constructions

* `fiber_bundle.charted_space`: A fiber bundle `E` over a base `B` with model fiber `F` is naturally
  a charted space modelled on `B √ó F`.

* `fiber_bundle.charted_space'`: Let `B` be a charted space modelled on `HB`.  Then a fiber bundle
  `E` over a base `B` with model fiber `F` is naturally a charted space modelled on `HB.prod F`.

* `smooth_vector_bundle`: Mixin class stating that a (topological) `vector_bundle` is smooth, in the
  sense of having smooth transition functions.

* `smooth_fiberwise_linear.has_groupoid`: For a smooth vector bundle `E` over `B` with fiber
  modelled on `F`, the change-of-co-ordinates between two trivializations `e`, `e'` for `E`,
  considered as charts to `B √ó F`, is smooth and fiberwise linear, in the sense of belonging to the
  structure groupoid `smooth_fiberwise_linear`.

* `bundle.total_space.smooth_manifold_with_corners`: A smooth vector bundle is naturally a smooth
  manifold.

* `vector_bundle_core.smooth_vector_bundle`: If a (topological) `vector_bundle_core` is smooth, in
  the sense of having smooth transition functions, then the vector bundle constructed from it is a
  smooth vector bundle.

* `bundle.prod.smooth_vector_bundle`: The direct sum of two smooth vector bundles is a smooth vector
  bundle.
-/

assert_not_exists mfderiv

open bundle set local_homeomorph
open_locale manifold bundle

variables {ùïú B B' F M : Type*} {E : B ‚Üí Type*}

/-! ### Charted space structure on a fiber bundle -/

section
variables [topological_space F] [topological_space (total_space E)] [‚àÄ x, topological_space (E x)]
  {HB : Type*} [topological_space HB]
  [topological_space B] [charted_space HB B] [fiber_bundle F E]

/-- A fiber bundle `E` over a base `B` with model fiber `F` is naturally a charted space modelled on
`B √ó F`. -/
instance fiber_bundle.charted_space : charted_space (B √ó F) (total_space E) :=
{ atlas := (Œª e : trivialization F (œÄ E), e.to_local_homeomorph) '' trivialization_atlas F E,
  chart_at := Œª x, (trivialization_at F E x.proj).to_local_homeomorph,
  mem_chart_source := Œª x, (trivialization_at F E x.proj).mem_source.mpr
    (mem_base_set_trivialization_at F E x.proj),
  chart_mem_atlas := Œª x, mem_image_of_mem _ (trivialization_mem_atlas F E _) }

section
local attribute [reducible] model_prod

/-- Let `B` be a charted space modelled on `HB`.  Then a fiber bundle `E` over a base `B` with model
fiber `F` is naturally a charted space modelled on `HB.prod F`. -/
instance fiber_bundle.charted_space' : charted_space (model_prod HB F) (total_space E) :=
charted_space.comp _ (model_prod B F) _
end

lemma fiber_bundle.charted_space_chart_at (x : total_space E) :
  chart_at (model_prod HB F) x =
  (trivialization_at F E x.proj).to_local_homeomorph ‚â´‚Çï
  (chart_at HB x.proj).prod (local_homeomorph.refl F) :=
begin
  dsimp only [fiber_bundle.charted_space', charted_space.comp, fiber_bundle.charted_space,
    prod_charted_space, charted_space_self],
  rw [trivialization.coe_coe,
    trivialization.coe_fst' _ (mem_base_set_trivialization_at F E x.proj)]
end

end

/-! ### Smooth vector bundles -/

variables [nontrivially_normed_field ùïú] [‚àÄ x, add_comm_monoid (E x)] [‚àÄ x, module ùïú (E x)]
  [normed_add_comm_group F] [normed_space ùïú F]
  [topological_space (total_space E)] [‚àÄ x, topological_space (E x)]

  {EB : Type*} [normed_add_comm_group EB] [normed_space ùïú EB]
  {HB : Type*} [topological_space HB] (IB : model_with_corners ùïú EB HB)
  [topological_space B] [charted_space HB B] [smooth_manifold_with_corners IB B]

variables (F E) [fiber_bundle F E] [vector_bundle ùïú F E]

/-- When `B` is a smooth manifold with corners with respect to a model `IB` and `E` is a
topological vector bundle over `B` with fibers isomorphic to `F`, then `smooth_vector_bundle F E IB`
registers that the bundle is smooth, in the sense of having smooth transition functions.
This is a mixin, not carrying any new data`. -/
class smooth_vector_bundle : Prop :=
(smooth_on_coord_change : ‚àÄ (e e' : trivialization F (œÄ E))
  [mem_trivialization_atlas e] [mem_trivialization_atlas e'],
  smooth_on IB ùìò(ùïú, F ‚ÜíL[ùïú] F) (Œª b : B, (e.coord_changeL ùïú e' b : F ‚ÜíL[ùïú] F))
  (e.base_set ‚à© e'.base_set))

export smooth_vector_bundle (smooth_on_coord_change)

variables [smooth_vector_bundle F E IB]


/-- For a smooth vector bundle `E` over `B` with fiber modelled on `F`, the change-of-co-ordinates
between two trivializations `e`, `e'` for `E`, considered as charts to `B √ó F`, is smooth and
fiberwise linear. -/
instance : has_groupoid (total_space E) (smooth_fiberwise_linear B F IB) :=
{ compatible := begin
    rintros _ _ ‚ü®e, he, rfl‚ü© ‚ü®e', he', rfl‚ü©,
    haveI : mem_trivialization_atlas e := ‚ü®he‚ü©,
    haveI : mem_trivialization_atlas e' := ‚ü®he'‚ü©,
    resetI,
    rw mem_smooth_fiberwise_linear_iff,
    refine ‚ü®_, _, e.open_base_set.inter e'.open_base_set, smooth_on_coord_change e e', _, _, _‚ü©,
    { rw inter_comm,
      apply cont_mdiff_on.congr (smooth_on_coord_change e' e),
      { intros b hb,
        rw e.symm_coord_changeL e' hb },
      { apply_instance },
      { apply_instance }, },
    { simp only [e.symm_trans_source_eq e', fiberwise_linear.local_homeomorph,
      trans_to_local_equiv, symm_to_local_equiv]},
    { rintros ‚ü®b, v‚ü© hb,
      have hb' : b ‚àà e.base_set ‚à© e'.base_set,
      { simpa only [trans_to_local_equiv, symm_to_local_equiv, e.symm_trans_source_eq e',
          coe_coe_symm, prod_mk_mem_set_prod_eq, mem_univ, and_true] using hb },
      exact e.apply_symm_apply_eq_coord_changeL e' hb' v, }
  end }

/-- A smooth vector bundle `E` is naturally a smooth manifold. -/
instance : smooth_manifold_with_corners (IB.prod ùìò(ùïú, F)) (total_space E) :=
begin
  refine { .. structure_groupoid.has_groupoid.comp (smooth_fiberwise_linear B F IB) _ },
  intros e he,
  rw mem_smooth_fiberwise_linear_iff at he,
  obtain ‚ü®œÜ, U, hU, hœÜ, h2œÜ, heœÜ‚ü© := he,
  rw [is_local_structomorph_on_cont_diff_groupoid_iff],
  refine ‚ü®cont_mdiff_on.congr _ heœÜ.eq_on, cont_mdiff_on.congr _ heœÜ.symm'.eq_on‚ü©,
  { rw heœÜ.source_eq,
    apply smooth_on_fst.prod_mk,
    exact (hœÜ.comp cont_mdiff_on_fst $ prod_subset_preimage_fst _ _).clm_apply cont_mdiff_on_snd },
  { rw heœÜ.target_eq,
    apply smooth_on_fst.prod_mk,
    exact (h2œÜ.comp cont_mdiff_on_fst $ prod_subset_preimage_fst _ _).clm_apply cont_mdiff_on_snd },
end

/-! ### Core construction for smooth vector bundles -/

namespace vector_bundle_core
variables {Œπ : Type*} {F} (Z : vector_bundle_core ùïú B F Œπ)

/-- Mixin for a `vector_bundle_core` stating smoothness (of transition functions). -/
class is_smooth (IB : model_with_corners ùïú EB HB) : Prop :=
(smooth_on_coord_change [] :
  ‚àÄ i j, smooth_on IB ùìò(ùïú, F ‚ÜíL[ùïú] F) (Z.coord_change i j) (Z.base_set i ‚à© Z.base_set j))

export is_smooth (renaming smooth_on_coord_change ‚Üí vector_bundle_core.smooth_on_coord_change)

variables [Z.is_smooth IB]

/-- If a `vector_bundle_core` has the `is_smooth` mixin, then the vector bundle constructed from it
is a smooth vector bundle. -/
instance smooth_vector_bundle : smooth_vector_bundle F Z.fiber IB :=
{ smooth_on_coord_change := begin
    rintros - - ‚ü®i, rfl‚ü© ‚ü®i', rfl‚ü©,
    refine (Z.smooth_on_coord_change IB i i').congr (Œª b hb, _),
    ext v,
    exact Z.local_triv_coord_change_eq i i' hb v,
  end }

end vector_bundle_core

/-! ### The trivial smooth vector bundle -/

/-- A trivial vector bundle over a smooth manifold is a smooth vector bundle. -/
instance bundle.trivial.smooth_vector_bundle : smooth_vector_bundle F (bundle.trivial B F) IB :=
{ smooth_on_coord_change := begin
    introsI e e' he he',
    unfreezingI { obtain rfl := bundle.trivial.eq_trivialization B F e },
    unfreezingI { obtain rfl := bundle.trivial.eq_trivialization B F e' },
    simp_rw bundle.trivial.trivialization.coord_changeL,
    exact smooth_const.smooth_on
  end }

/-! ### Direct sums of smooth vector bundles -/

section prod
variables (F‚ÇÅ : Type*) [normed_add_comm_group F‚ÇÅ] [normed_space ùïú F‚ÇÅ]
  (E‚ÇÅ : B ‚Üí Type*) [topological_space (total_space E‚ÇÅ)]
  [Œ† x, add_comm_monoid (E‚ÇÅ x)] [Œ† x, module ùïú (E‚ÇÅ x)]

variables (F‚ÇÇ : Type*) [normed_add_comm_group F‚ÇÇ] [normed_space ùïú F‚ÇÇ]
  (E‚ÇÇ : B ‚Üí Type*) [topological_space (total_space E‚ÇÇ)]
  [Œ† x, add_comm_monoid (E‚ÇÇ x)] [Œ† x, module ùïú (E‚ÇÇ x)]

variables [Œ† x : B, topological_space (E‚ÇÅ x)] [Œ† x : B, topological_space (E‚ÇÇ x)]
  [fiber_bundle F‚ÇÅ E‚ÇÅ] [fiber_bundle F‚ÇÇ E‚ÇÇ]
  [vector_bundle ùïú F‚ÇÅ E‚ÇÅ] [vector_bundle ùïú F‚ÇÇ E‚ÇÇ]
  [smooth_vector_bundle F‚ÇÅ E‚ÇÅ IB] [smooth_vector_bundle F‚ÇÇ E‚ÇÇ IB]

/-- The direct sum of two smooth vector bundles over the same base is a smooth vector bundle. -/
instance bundle.prod.smooth_vector_bundle :
  smooth_vector_bundle (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) IB :=
{ smooth_on_coord_change := begin
    rintros _ _ ‚ü®e‚ÇÅ, e‚ÇÇ, i‚ÇÅ, i‚ÇÇ, rfl‚ü© ‚ü®e‚ÇÅ', e‚ÇÇ', i‚ÇÅ', i‚ÇÇ', rfl‚ü©,
    resetI,
    rw [smooth_on],
    refine cont_mdiff_on.congr _ (e‚ÇÅ.coord_changeL_prod ùïú e‚ÇÅ' e‚ÇÇ e‚ÇÇ'),
    refine cont_mdiff_on.clm_prod_map _ _,
    { refine (smooth_on_coord_change e‚ÇÅ e‚ÇÅ').mono _,
      simp only [trivialization.base_set_prod] with mfld_simps,
      mfld_set_tac },
    { refine (smooth_on_coord_change e‚ÇÇ e‚ÇÇ').mono _,
      simp only [trivialization.base_set_prod] with mfld_simps,
      mfld_set_tac },
  end }

end prod
